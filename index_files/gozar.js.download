// اضافه کردن المان‌های مودال و لودینگ به صفحه
document.body.insertAdjacentHTML(
    'afterbegin',
    `
  <!-- مودال برای نمایش iframe -->
  <div id="modalOverlay" class="modal-overlay" style="display: none;"> 
      <div class="modal-content">
          <span class="modal-close" id="modalCloseBtn">&times;</span>
          <iframe id="authFrame"></iframe>
      </div>
  </div>
  
  <!-- المان لودینگ -->
  <div id="initialLoading" class="loading-overlay" style="display: none;">
      <div class="spinner">
          <div class="dot"></div>
          <div class="dot"></div>
          <div class="dot"></div>
          <div class="dot"></div>
      </div>
  </div>
  `
);

// توابع مربوط به لودینگ و مودال
function showLoading() {
    console.log('Showing loading overlay');
    document.getElementById('initialLoading').style.display = 'flex';
}

function hideLoading() {
    console.log('Hiding loading overlay');
    document.getElementById('initialLoading').style.display = 'none';
}

function showModal() {
    console.log('Showing modal');
    const modalOverlay = document.getElementById('modalOverlay');
    if (modalOverlay) modalOverlay.style.display = 'flex';
}

function closeModal() {
    console.log('Closing modal');
    const modalOverlay = document.getElementById('modalOverlay');
    const authFrame = document.getElementById('authFrame');
    if (modalOverlay) modalOverlay.style.display = 'none';
    if (authFrame) authFrame.src = '';
}


function gozarLogin({ clientId, redirectId, postLogin }) {
    showLoading();          // نمایش لودینگ
    showModal();   // نمایش مودال
    // گوش دادن به پیام‌های دریافتی از iframe
    window.addEventListener(
        'message',
        function (event) {
            // در صورت نیاز، دامنه مجاز را بررسی کنید
            // if (event.origin !== 'https://domain- معتبر') return;

            if (!event.data || typeof event.data !== 'object') {
                console.warn('پیام غیرمنتظره دریافت شده است:', event.data);
                return;
            }

            const { status, message } = event.data;

            if (status === 'success') {
                console.log("success and close")
                closeModal();
                postLogin?.();
            } else if (status === 'error') {
                console.log("error and close")

                console.error('خطا در فرآیند ورود:', message);
                alert('ورود ناموفق بود: ' + message);
                closeModal();
            } else if (status) {
                console.warn('وضعیت ناشناخته دریافت شد:', status);
            }
        },
        false,
    );

    const state = Math.random().toString(36).substring(2);

    // ساختن آدرس احراز هویت
    const authUrl =
        'https://user.paziresh24.com/realms/paziresh24/protocol/openid-connect/auth' +
        '?client_id=' +
        clientId +
        '&redirect_uri=' +
        encodeURIComponent(redirectId) +
        '&response_type=code' +
        '&scope=openid%20profile%20email' +
        '&state=' +
        state +
        '&kc_idp_hint=gozar' +
        '&client_idp=' +
        clientId +
        '&redirect_idp=' +
        encodeURIComponent(redirectId) +
        '&state_idp=' + encodeURIComponent(window.location.href); // اضافه کردن URL والد

    const authFrame = document.getElementById('authFrame');
    authFrame.src = authUrl;

    authFrame.addEventListener('load', function () {
        hideLoading(); // مخفی کردن لودینگ اولیه
    }, { once: true });
}

// افزودن رویداد کلیک به دکمه بستن مودال
const modalCloseBtn = document.getElementById('modalCloseBtn');
if (modalCloseBtn) {
    modalCloseBtn.addEventListener('click', function () {
        closeModal();
    });
}